language: minimal

services: docker

sudo: required

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config


before_script:
  - sudo apt-get -qq -y install conntrack
  - docker -v && docker-compose -v
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin/

  # Download kubectl, which is a requirement for using minikube.
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.18.1/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  # Download minikube.
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/v1.8.1/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
  - mkdir -p $HOME/.kube $HOME/.minikube
  - touch $KUBECONFIG
  - sudo minikube start --profile=minikube --vm-driver=none --kubernetes-version=v1.18.1
  - minikube update-context --profile=minikube
  - "sudo chown -R travis: /home/travis/.minikube/"
  - eval "$(minikube docker-env --profile=minikube)" && export DOCKER_CLI='docker'


script:
  # Following is just to demo that the kubernetes cluster works.
  - kubectl cluster-info
  # Wait for kube-dns to be ready.
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
  - docker-compose -f udacity-c3-deployment/docker/docker-compose.yaml build   
  # - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_NAME" --password-stdin
  # - docker-compose -f udacity-c3-deployment/docker/docker-compose-build.yaml push
  - kubectl apply -f udacity-c3-deployment/k8s/aws-secret.yaml
  - kubectl apply -f  udacity-c3-deployment/k8s/env-configmap.yaml
  
  - kubectl create secret generic env-secret --from-literal=POSTGRESS_USERNAME="postgres" --from-literal=POSTGRESS_PASSWORD="database-1" 
  - kubectl apply -f  udacity-c3-deployment/k8s/backend-feed-deployment.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/backend-feed-service.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/backend-user-deployment.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/backend-user-service.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/backend-feed-service.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/frontend-deployment.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/frontend-service.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/reverseproxy-deployment.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/reverseproxy-service.yaml
  - kubectl apply -f  udacity-c3-deployment/k8s/validation-deployment.yaml 
  - kubectl apply -f  udacity-c3-deployment/k8s/validation-service.yaml
  

